pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    timestamps()
    skipDefaultCheckout()
  }

  stages{
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Image') {
      when {
        anyOf {
          changeset "Gemfile"
          changeset "Gemfile.lock"
          changeset "./pipelines/jekyll.Dockerfile"
          expression { !sh(script: 'docker image inspect portfolio-jekyll:latest > /dev/null 2>&1', returnStatus: true) == 0 }
        }
      }

      steps {
        sh 'docker build -t portfolio-jekyll:latest -f ./pipelines/jekyll.Dockerfile .'
      }
    }

    stage('Deploy Dev') {
      steps {
        sh '''
          docker run --rm \
          -v $PWD:/app/source \
          -v ~/Containers/portfolio/dev:/app/site-output \
          portfolio-jekyll:latest \
          bundle exec jekyll build --source /app/source --destination /app/site-output
        '''
      }
    }

    stage('Deploy API') {
      when {
        changeset "api/**"
      }
      
      steps {
        withCredentials([string(credentialsId: 'wakatime_token', variable: 'WAKATIME_API_KEY')]) {
          sh '''
            env WAKATIME_API_KEY=$WAKATIME_API_KEY \
            env COMPOSE_PROJECT_NAME=portfolio-website \
            docker compose -f ./pipelines/docker-compose.yml up -d --build api
          '''
        }
      }
    }

    stage('Deploy Prod') {
      when {
        branch 'main'
      }

      steps {
        script {
          try {
            input message: 'Do you want to deploy the prod site?', ok: 'Yes, build it!'
            sh '''
              docker run --rm \
              -v $PWD:/app/source \
              -v ~/Containers/portfolio/prod:/app/site-output  \
              portfolio-jekyll:latest \
              bundle exec jekyll build --source /app/source --destination /app/site-output
            '''
          } catch (e) {
            echo 'Prod deployment skipped by user.'
          }
        }
      }
    }
  }
}